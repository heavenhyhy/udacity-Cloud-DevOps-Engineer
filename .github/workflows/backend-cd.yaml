name: Movie Picture Pipeline Backend CD

on:
  push:
    branches:
      - main
    paths:
      - 'Movie-Picture-Pipeline/starter/backend/**'
  workflow_dispatch:

jobs:

  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Movie-Picture-Pipeline/starter/backend/
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        pip install pipenv
        pipenv install --dev
    - name: Lint
      run: pipenv run lint

  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Movie-Picture-Pipeline/starter/backend/
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        pip install pipenv
        pipenv install --dev
    - name: Test
      run: pipenv run test

  build-and-deloy:
    needs: [lint, test]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Movie-Picture-Pipeline/starter/backend/
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: sangtd2-mp-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
    - name: Configure Kubeconfig
      run:
       aws eks update-kubeconfig --name sangtd2 --region us-east-1
    - name: Deploy
      working-directory: starter/backend/k8s
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: sangtd2-mp-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
          kustomize edit set image backend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
          kustomize build | kubectl apply -f -

