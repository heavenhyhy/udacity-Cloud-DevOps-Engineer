name: Movie Picture Pipeline Frontend CD

on:
  push:
    branches:
      - main
    paths:
      - 'Movie-Picture-Pipeline/starter/frontend/**'
  workflow_dispatch:

env:
  REACT_APP_MOVIE_API_URL: "http://localhost:5000"

jobs:

  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Movie-Picture-Pipeline/starter/frontend/
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 18
    - uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-
    - run: |
        npm ci
        npm run lint
        
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Movie-Picture-Pipeline/starter/frontend/
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 18
    - uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-
    - run: |
        npm ci  
        npm run test

  build-and-deploy:
    needs: [lint, test]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Movie-Picture-Pipeline/starter/frontend/
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 18
    - uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: sangtd2-mp-frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --build-arg=REACT_APP_MOVIE_API_URL=$REACT_APP_MOVIE_API_URL -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
    - name: Configure Kubeconfig
      run:
       aws eks update-kubeconfig --name sangtd2 --region us-east-1
    - name: Deploy
      working-directory: starter/frontend/k8s
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: sangtd2-mp-frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
          kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
          kustomize build | kubectl apply -f -
